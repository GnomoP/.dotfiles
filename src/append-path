#!/bin/bash -x

# shellcheck disable=SC2034
ORG_IFS=$IFS

append-path () {
local NEW_PATH

# Properly format a PATH-formated string
_beautify () {
  # 0: path_fmt_i, separated by ":"
  # 1: path_fmt_o, separated by "\n"
  # 2: path_fmt_o, separated by " "
  local path_name
  local path_fmt_p=0

  if [[ -n "$1" ]]; then
    local path_fmt_i=
    eval path_fmt_i="\${$1[*]}"

    path_name="$1"
    shift
  else
    local path_fmt_i="${PATH[*]}"
    path_name="PATH"
  fi

  while [[ -n "$*" ]]; do
    local name
    name="$(basename "$0")"

    case "$1" in
      '-f0' | '-f1' | '-f2')
        path_fmt_p="$(sed -e 's/[^0-2]//g' <<< "$1")"
        ;;

      '--format')
        if [[ -n "$2" ]]; then
          echo "$name: Unspecified format -- '$2'"
          echo "Try '$name --help' for more information."
          return 1
        elif [[ ! "$2" =~ [0-2]  ]]; then
          echo "$name: Invalid format -- '$2'"
          echo "Try '$name --help' for more information."
          return 1
        else
          path_fmt_p="$2"
        fi
        ;;

      '-p' | '--print')
        local path_echo='true'
        ;;

      '-e' | '--export')
        local path_export='true'
        ;;

      '+p')
        path_echo=''
        ;;

      '+e')
        path_export=''
        ;;

      *)
        local arg="$1"
        arg="$(sed -E 's/^-+//g' <<< "$arg")"

        echo "$name: Invalid option -- '$arg'"
        echo "Try '$name --help' for more information."
        return 1
        ;;
    esac

    shift
  done

  unset arg

  # Separate './' from the other directories, if it is found
  if grep -qE ':\.\/:' <<< "$path_fmt_i"; then
    grep -qvE '^:' <<< "$path_fmt_i" &&\
      path_fmt_i=":$path_fmt_i"
    grep -qvE ':$' <<< "$path_fmt_i" &&\
      path_fmt_i="$path_fmt_i:"

    path_fmt_i=":./$( sed -E 's/(:?)(\.\/)(:?)/:/g' <<< "$path_fmt_i" )"
  fi

  # Delete any colons at the beginning and the end
  path_fmt_i="$( sed -E 's/(^:)|(:$)//g' <<< "$path_fmt_i" )"

  # Substitute a colon and a slash for a newline and a slash
  path_fmt_i="$( tr ':/' '\n/' <<< "$path_fmt_i" )"

  # Delete the trailing slashes (except for './')
  path_fmt_i="$( perl -pe 's/([^\.])\/\n/\1\n/g' <<< "$path_fmt_i" )"

  # Sort, get rid of duplicates and separate entries
  path_fmt_i="$( echo "$path_fmt_i" | sort | uniq )"

  case "$path_fmt_p" in
    '0')
      PATH_FMT="$( echo "$path_fmt_i" | tr '\n' ':' )"
      PATH_FMT="$( sed -E 's/:$//' <<< "$PATH_FMT" )"

      [[ -n "$path_echo" ]] &&\
        echo "$PATH_FMT"
      [[ -n "$path_export" ]] &&\
        eval "$path_name"=\""$PATH_FMT"\"\; export "$path_name"
      ;;

    '1')
      PATH_FMT="$path_fmt_i"
      [[ -n "$path_echo" ]] &&\
        echo "$PATH_FMT"
      [[ -n "$path_export" ]] &&\
        export PATH_FMT
      ;;

    '2')
      PATH_FMT=()
      IFS=: read -ra PATH_FMT <<< "$path_fmt_i"
      [[ -n "$path_echo" ]] &&
        echo "$path_fmt_i" | tr '\n' ' '
      [[ -n "$path_export" ]] &&\
        eval "$path_name"=\""$PATH_FMT"\"\; export "$path_name"
      ;;

    *)
      ;;
  esac
}

# Append it to PATH
_append () {
  # Ignore if no arguments are passed
  [[ -z "$*" ]] && return

  local -a new_path
  IFS=: read -ra new_path <<< "$PATH"
  for path; do
    if \
      # $path is empty (set to '')
      [[ -z "$path" ]] ||\
      # first character of $path is a whitespace (\ \t,\n,\r)
      grep -qE '^\s' <<< "$path"
    then
      echo "Skipping path '$path'"
      continue
    else
      IFS=: new_path+=("$path")
    fi
  done
  unset PATH_FMT

  # shellcheck disable=SC2034
  IFS=: NEW_PATH="${new_path[*]}"

  IFS=$OLD_IFS
  unset ORG_IFS
  export IFS

  PATH="$(_beautify NEW_PATH -f0 -p)"
  export PATH
}

# Beautify PATH regardless of any passed arguments
_beautify PATH -f0 -e

# Execute _append only if any argument has been passed
[[ -n "$*" ]] &&
  _append "$@"

} && append-path "$@"

if [[ -v "ORG_IFS" ]]; then
  IFS=$ORG_IFS
  unset ORG_IFS
  export IFS
fi

# vim: syntax=sh
# vim: set ts=2 sw=2 tw=80 et :
